import config
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import requests
from bs4 import BeautifulSoup

#–ü–æ–ª—É—á–∏–º –∫—É—Ä—Å –¥–æ–ª–ª—Ä–∞ –∫ —Ä—É–±–ª—é
url = 'https://www.x-rates.com/calculator/?from=USD&to=RUB&amount=1'
page = requests.get(url)
#print(page.status_code)
soup = BeautifulSoup(page.text, 'lxml')

rate = soup.find('span', class_='ccOutputRslt')

bot = telebot.TeleBot(config.TOKEN)

transaction_income = {}

def start_button(message):
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEIM3lkF2sJvI4aQHHkxciKpHWdHrWZ5wACzBAAAr8M0ErYqDe37o7zay8E')
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton('üí∏ –î–æ—Ö–æ–¥—ã', callback_data='income'),
                 InlineKeyboardButton('üí∏ –†–∞—Å—Ö–æ–¥—ã', callback_data='expense'))
    bot.send_message(message.chat.id, f'üá∫üá∏‚û°Ô∏èüá∑üá∫ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é: {rate.text}')
    bot.send_message(message.chat.id, 'üîîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)


def continue_button(message, button_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton('üîÑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—É–º–º—É', callback_data=button_id)
    )
    keyboard.row(
        InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', callback_data='main_menu')
    )
    bot.send_message(message.chat.id, f'üí¨ –ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def start(message):
  bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Çüëã \n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.')
  start_button(message)


@bot.callback_query_handler(func=lambda call: True)
def button_click(callback_query):
  button_id = callback_query.data
  chat_id = callback_query.message.chat.id
  message = callback_query.message
  if button_id == 'income':
      keyboard = InlineKeyboardMarkup()
      keyboard.row(
          InlineKeyboardButton('üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞', callback_data='salary'),
          InlineKeyboardButton('üí∏ –ü—Ä–æ—á–µ–µ', callback_data='other_income')
      )
      keyboard.row(
          InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', callback_data='main_menu')
      )

      #–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–µ—Å—Ç–∏
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id, reply_markup=None)
      bot.send_message(callback_query.message.chat.id, f'‚úîÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–î–æ—Ö–æ–¥—ã"!', reply_markup=keyboard)

  elif button_id == 'expense':
      keyboard = InlineKeyboardMarkup()
      keyboard.row(
          InlineKeyboardButton('üí∏ –í–∞–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', callback_data='important_expense'),
          InlineKeyboardButton('üí∏ –ü—Ä–æ—á–µ–µ', callback_data='other_expense')
      )
      keyboard.row(
          InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', callback_data='main_menu')
      )
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                    reply_markup=None)
      bot.send_message(callback_query.message.chat.id, f'‚úîÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–†–∞—Å—Ö–æ–¥—ã"!', reply_markup=keyboard)

  elif button_id == 'main_menu':
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                    reply_markup=None)
      start_button(callback_query.message)

  elif button_id == 'salary':
      #transaction_income[button_id] = 0
      bot.send_message(message.chat.id, 'üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
      bot.register_next_step_handler(message, income_amount, additional_arg = button_id)
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id, reply_markup=None)

  elif button_id == 'other_income':
      bot.send_message(message.chat.id, 'üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
      bot.register_next_step_handler(message, income_amount, additional_arg = button_id)
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                    reply_markup=None)
  elif button_id == 'important_expense':
      bot.send_message(message.chat.id, 'üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
      bot.register_next_step_handler(message, income_amount, additional_arg = button_id)
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                    reply_markup=None)
  elif button_id == 'other_expense':
      bot.send_message(message.chat.id, 'üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
      bot.register_next_step_handler(message, income_amount, additional_arg = button_id)
      bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                    reply_markup=None)

def income_amount(message, **kwargs):
    button_id = kwargs.get('additional_arg')
    try:
        amount = float(message.text)
        # Update the transactions dictionary with the income amount
        if button_id in transaction_income:
            transaction_income[button_id] += amount
        else:
            transaction_income[button_id] = amount
        # Send a success message to the user
        bot.send_message(message.chat.id, f"‚úîÔ∏è –°—É–º–º–∞ {amount} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        bot.send_message(message.chat.id, f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {transaction_income[button_id]} —Ä—É–±.")

    except ValueError:
    # Send an error message to the user if the input is not a number
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    continue_button(message, button_id)


bot.polling()